---
import { getLangFromUrl } from '@/i18n/utils';
import Head from '@/components/Header.astro';
import NavMenu from '@/components/react/nav-menu';
import Footer from '@/components/Footer.astro';
import LanguagePicker from '@/components/LanguagePicker.astro';

// Global CSS
import '../global.css';

import { ModeToggle } from '@/components/react/ModeToggle';

import snow from '@/components/react/snowfall';

// configs
import { siteConfig } from '../config';

interface Props {
	title: string | undefined;
	activeNav?: string;
}

const { title, activeNav } = Astro.props;
const combtitle = siteConfig.title + ' | ' + title;

const isOnline = (): boolean => {
	const cf_prod = import.meta.env.CLOUDFLARE_PRODUCTION;
	if (cf_prod == "true") return true;
	else return false;
};

const isProd = import.meta.env.PROD;
const isDev = import.meta.env.DEV;

const lang = getLangFromUrl(Astro.url);

const q = Astro.url.searchParams.get('q') ?? undefined;
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['class'],
		});
	}
</script>

<html class="dark" lang={lang}>
	<Head title={combtitle} />
	<body>
		<div class="NavMenu">
			<header>
				<NavMenu active={activeNav}><ModeToggle client:visible /></NavMenu>
			</header>
		</div>
		<slot />
		{
			isProd && (
					<div
						class="cf-turnstile"
						data-sitekey="0x4AAAAAAAbhEsfftzTNsmMO"
						data-theme="dark"
					/>
					<style>
						.cf-turnstile {
							visibility: hidden;
						}
					</style>
					<noscript>
						<iframe
							src="https://www.googletagmanager.com/ns.html?id=GTM-P6SH88WW"
							height="0"
							width="0"
							style="display:none;visibility:hidden"
						/>
					</noscript>
			)
		}
		<!-- End Google Tag Manager (noscript) -->

		{
			isProd && (
/* 				<script
					is:inline
					src="https://challenges.cloudflare.com/turnstile/v0/api.js"
					defer
				/> */
				<script>
					import fetchInject from 'fetch-inject';

					const pageReady = new Promise((resolve, reject) => {
						document.onreadystatechange = () => {
							document.readyState === "complete" && resolve(document);
						};
					});

					fetchInject(['https://challenges.cloudflare.com/turnstile/v0/api.js'],
								pageReady).then(() => {
									const elem = document.querySelector('.cf-turnstile');
									if (elem) (elem as HTMLElement).style.visibility = 'visible';
								});
				</script>
			)
		}

		<Footer />
	</body>
</html>